

from google.colab import drive
drive.mount('/content/drive')
     

import os
import zipfile
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
     


import os
import zipfile
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(lr=1e-4),
              metrics=['acc'])

# This code has changed. Now instead of the ImageGenerator just rescaling
# the image, we also rotate and do other operations
# Updated to do image augmentation
train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest')

test_datagen = ImageDataGenerator(rescale=1./255)

# Flow training images in batches of 20 using train_datagen generator
train_generator = train_datagen.flow_from_directory(
        '/content/drive/My Drive/Cat and Dog Classification/train',  # This is the source directory for training images
        target_size=(150, 150),  # All images will be resized to 150x150
        batch_size=100,
        # Since we use binary_crossentropy loss, we need binary labels
        class_mode='binary')

# Flow validation images in batches of 20 using test_datagen generator
validation_generator = test_datagen.flow_from_directory(
        '/content/drive/My Drive/Cat and Dog Classification/validation',
        target_size=(150, 150),
        batch_size=100,
        class_mode='binary')

     
Found 2000 images belonging to 2 classes.
Found 1007 images belonging to 2 classes.

history = model.fit(
      train_generator,
      steps_per_epoch=20,  # 2000 images = batch_size * steps
      epochs=100,
      validation_data=validation_generator,
      validation_steps=10,  # 1000 images = batch_size * steps
      verbose=2)
     
Epoch 1/100
20/20 - 19s - loss: 0.6767 - acc: 0.5650 - val_loss: 0.6636 - val_acc: 0.5710
Epoch 2/100
20/20 - 19s - loss: 0.6764 - acc: 0.5620 - val_loss: 0.6588 - val_acc: 0.5830
Epoch 3/100
20/20 - 19s - loss: 0.6693 - acc: 0.5700 - val_loss: 0.6921 - val_acc: 0.5220
Epoch 4/100
20/20 - 19s - loss: 0.6603 - acc: 0.5965 - val_loss: 0.6691 - val_acc: 0.5540
Epoch 5/100
20/20 - 19s - loss: 0.6586 - acc: 0.6050 - val_loss: 0.6274 - val_acc: 0.6460
Epoch 6/100
20/20 - 19s - loss: 0.6517 - acc: 0.6035 - val_loss: 0.6305 - val_acc: 0.6380
Epoch 7/100
20/20 - 19s - loss: 0.6504 - acc: 0.6025 - val_loss: 0.6178 - val_acc: 0.6570
Epoch 8/100
20/20 - 19s - loss: 0.6415 - acc: 0.6320 - val_loss: 0.6187 - val_acc: 0.6440
Epoch 9/100
20/20 - 20s - loss: 0.6293 - acc: 0.6335 - val_loss: 0.6053 - val_acc: 0.6750
Epoch 10/100
20/20 - 19s - loss: 0.6295 - acc: 0.6295 - val_loss: 0.5993 - val_acc: 0.6730
Epoch 11/100
20/20 - 19s - loss: 0.6252 - acc: 0.6430 - val_loss: 0.6009 - val_acc: 0.6810
Epoch 12/100
20/20 - 19s - loss: 0.6265 - acc: 0.6265 - val_loss: 0.5927 - val_acc: 0.6780
Epoch 13/100
20/20 - 19s - loss: 0.6214 - acc: 0.6500 - val_loss: 0.5830 - val_acc: 0.6830
Epoch 14/100
20/20 - 19s - loss: 0.6083 - acc: 0.6540 - val_loss: 0.6261 - val_acc: 0.6200
Epoch 15/100
20/20 - 19s - loss: 0.6046 - acc: 0.6620 - val_loss: 0.5762 - val_acc: 0.6990
Epoch 16/100
20/20 - 19s - loss: 0.6023 - acc: 0.6760 - val_loss: 0.5728 - val_acc: 0.7110
Epoch 17/100
20/20 - 19s - loss: 0.6031 - acc: 0.6575 - val_loss: 0.5764 - val_acc: 0.7010
Epoch 18/100
20/20 - 19s - loss: 0.5952 - acc: 0.6775 - val_loss: 0.5653 - val_acc: 0.7000
Epoch 19/100
20/20 - 19s - loss: 0.5960 - acc: 0.6735 - val_loss: 0.5629 - val_acc: 0.7080
Epoch 20/100
20/20 - 19s - loss: 0.5877 - acc: 0.6845 - val_loss: 0.5733 - val_acc: 0.7130
Epoch 21/100
20/20 - 19s - loss: 0.5921 - acc: 0.6825 - val_loss: 0.5638 - val_acc: 0.7190
Epoch 22/100
20/20 - 19s - loss: 0.5813 - acc: 0.6835 - val_loss: 0.5485 - val_acc: 0.7080
Epoch 23/100
20/20 - 19s - loss: 0.5833 - acc: 0.6925 - val_loss: 0.5516 - val_acc: 0.7170
Epoch 24/100
20/20 - 19s - loss: 0.5830 - acc: 0.6960 - val_loss: 0.5475 - val_acc: 0.7160
Epoch 25/100
20/20 - 20s - loss: 0.5723 - acc: 0.6945 - val_loss: 0.5581 - val_acc: 0.7140
Epoch 26/100
20/20 - 19s - loss: 0.5592 - acc: 0.7085 - val_loss: 0.5791 - val_acc: 0.6890
Epoch 27/100
20/20 - 19s - loss: 0.5753 - acc: 0.6895 - val_loss: 0.5452 - val_acc: 0.7130
Epoch 28/100
20/20 - 19s - loss: 0.5719 - acc: 0.6915 - val_loss: 0.5391 - val_acc: 0.7190
Epoch 29/100
20/20 - 19s - loss: 0.5629 - acc: 0.7125 - val_loss: 0.5522 - val_acc: 0.7150
Epoch 30/100
20/20 - 19s - loss: 0.5630 - acc: 0.7105 - val_loss: 0.5397 - val_acc: 0.7190
Epoch 31/100
20/20 - 19s - loss: 0.5682 - acc: 0.6945 - val_loss: 0.5233 - val_acc: 0.7290
Epoch 32/100
20/20 - 19s - loss: 0.5561 - acc: 0.7160 - val_loss: 0.5453 - val_acc: 0.7060
Epoch 33/100
20/20 - 19s - loss: 0.5698 - acc: 0.6945 - val_loss: 0.5618 - val_acc: 0.7190
Epoch 34/100
20/20 - 19s - loss: 0.5622 - acc: 0.7075 - val_loss: 0.5160 - val_acc: 0.7330
Epoch 35/100
20/20 - 19s - loss: 0.5467 - acc: 0.7230 - val_loss: 0.5203 - val_acc: 0.7310
Epoch 36/100
20/20 - 19s - loss: 0.5600 - acc: 0.7065 - val_loss: 0.5765 - val_acc: 0.6940
Epoch 37/100
20/20 - 19s - loss: 0.5560 - acc: 0.7095 - val_loss: 0.5326 - val_acc: 0.7340
Epoch 38/100
20/20 - 19s - loss: 0.5557 - acc: 0.7165 - val_loss: 0.5309 - val_acc: 0.7260
Epoch 39/100
20/20 - 19s - loss: 0.5458 - acc: 0.7250 - val_loss: 0.5428 - val_acc: 0.7160
Epoch 40/100
20/20 - 19s - loss: 0.5392 - acc: 0.7330 - val_loss: 0.5287 - val_acc: 0.7200
Epoch 41/100
20/20 - 19s - loss: 0.5478 - acc: 0.7070 - val_loss: 0.5299 - val_acc: 0.7200
Epoch 42/100
20/20 - 19s - loss: 0.5370 - acc: 0.7250 - val_loss: 0.5810 - val_acc: 0.6850
Epoch 43/100
20/20 - 19s - loss: 0.5459 - acc: 0.7210 - val_loss: 0.5702 - val_acc: 0.6960
Epoch 44/100
20/20 - 19s - loss: 0.5376 - acc: 0.7175 - val_loss: 0.5378 - val_acc: 0.7250
Epoch 45/100
20/20 - 19s - loss: 0.5384 - acc: 0.7340 - val_loss: 0.5023 - val_acc: 0.7360
Epoch 46/100
20/20 - 19s - loss: 0.5367 - acc: 0.7250 - val_loss: 0.5144 - val_acc: 0.7330
Epoch 47/100
20/20 - 19s - loss: 0.5484 - acc: 0.7220 - val_loss: 0.5073 - val_acc: 0.7410
Epoch 48/100
20/20 - 19s - loss: 0.5285 - acc: 0.7395 - val_loss: 0.5753 - val_acc: 0.7030
Epoch 49/100
20/20 - 19s - loss: 0.5297 - acc: 0.7385 - val_loss: 0.5026 - val_acc: 0.7410
Epoch 50/100
20/20 - 19s - loss: 0.5251 - acc: 0.7355 - val_loss: 0.5029 - val_acc: 0.7420
Epoch 51/100
20/20 - 19s - loss: 0.5286 - acc: 0.7430 - val_loss: 0.5016 - val_acc: 0.7420
Epoch 52/100
20/20 - 19s - loss: 0.5215 - acc: 0.7435 - val_loss: 0.5650 - val_acc: 0.7060
Epoch 53/100
20/20 - 19s - loss: 0.5255 - acc: 0.7485 - val_loss: 0.5108 - val_acc: 0.7320
Epoch 54/100
20/20 - 19s - loss: 0.5169 - acc: 0.7550 - val_loss: 0.5225 - val_acc: 0.7340
Epoch 55/100
20/20 - 19s - loss: 0.5232 - acc: 0.7370 - val_loss: 0.5020 - val_acc: 0.7330
Epoch 56/100
20/20 - 19s - loss: 0.5146 - acc: 0.7445 - val_loss: 0.4907 - val_acc: 0.7510
Epoch 57/100
20/20 - 19s - loss: 0.5192 - acc: 0.7385 - val_loss: 0.4892 - val_acc: 0.7460
Epoch 58/100
20/20 - 19s - loss: 0.5102 - acc: 0.7515 - val_loss: 0.4866 - val_acc: 0.7560
Epoch 59/100
20/20 - 19s - loss: 0.5160 - acc: 0.7470 - val_loss: 0.5299 - val_acc: 0.7150
Epoch 60/100
20/20 - 19s - loss: 0.5222 - acc: 0.7300 - val_loss: 0.5287 - val_acc: 0.7320
Epoch 61/100
20/20 - 19s - loss: 0.5132 - acc: 0.7480 - val_loss: 0.5572 - val_acc: 0.7190
Epoch 62/100
20/20 - 19s - loss: 0.5177 - acc: 0.7455 - val_loss: 0.6129 - val_acc: 0.6850
Epoch 63/100
20/20 - 19s - loss: 0.5140 - acc: 0.7450 - val_loss: 0.4923 - val_acc: 0.7540
Epoch 64/100
20/20 - 19s - loss: 0.5094 - acc: 0.7490 - val_loss: 0.4889 - val_acc: 0.7520
Epoch 65/100
20/20 - 19s - loss: 0.5123 - acc: 0.7500 - val_loss: 0.4916 - val_acc: 0.7530
Epoch 66/100
20/20 - 19s - loss: 0.5058 - acc: 0.7520 - val_loss: 0.4880 - val_acc: 0.7550
Epoch 67/100
20/20 - 19s - loss: 0.5135 - acc: 0.7390 - val_loss: 0.4889 - val_acc: 0.7610
Epoch 68/100
20/20 - 19s - loss: 0.5032 - acc: 0.7420 - val_loss: 0.4818 - val_acc: 0.7590
Epoch 69/100
20/20 - 19s - loss: 0.4980 - acc: 0.7655 - val_loss: 0.5874 - val_acc: 0.6920
Epoch 70/100
20/20 - 19s - loss: 0.4911 - acc: 0.7520 - val_loss: 0.4984 - val_acc: 0.7560
Epoch 71/100
20/20 - 18s - loss: 0.5019 - acc: 0.7565 - val_loss: 0.5909 - val_acc: 0.6990
Epoch 72/100
20/20 - 19s - loss: 0.5049 - acc: 0.7510 - val_loss: 0.5440 - val_acc: 0.7230
Epoch 73/100
20/20 - 19s - loss: 0.4873 - acc: 0.7645 - val_loss: 0.4716 - val_acc: 0.7630
Epoch 74/100
20/20 - 19s - loss: 0.4934 - acc: 0.7705 - val_loss: 0.4628 - val_acc: 0.7700
Epoch 75/100
20/20 - 18s - loss: 0.4877 - acc: 0.7610 - val_loss: 0.4728 - val_acc: 0.7640
Epoch 76/100
20/20 - 19s - loss: 0.4948 - acc: 0.7585 - val_loss: 0.4883 - val_acc: 0.7560
Epoch 77/100
20/20 - 18s - loss: 0.4948 - acc: 0.7655 - val_loss: 0.4819 - val_acc: 0.7630
Epoch 78/100
20/20 - 19s - loss: 0.4842 - acc: 0.7765 - val_loss: 0.5089 - val_acc: 0.7480
Epoch 79/100
20/20 - 18s - loss: 0.4836 - acc: 0.7655 - val_loss: 0.4714 - val_acc: 0.7680
Epoch 80/100
20/20 - 18s - loss: 0.4778 - acc: 0.7590 - val_loss: 0.5407 - val_acc: 0.7170
Epoch 81/100
20/20 - 18s - loss: 0.4710 - acc: 0.7675 - val_loss: 0.5147 - val_acc: 0.7510
Epoch 82/100
20/20 - 19s - loss: 0.4939 - acc: 0.7545 - val_loss: 0.4612 - val_acc: 0.7780
Epoch 83/100
20/20 - 18s - loss: 0.4807 - acc: 0.7760 - val_loss: 0.4618 - val_acc: 0.7710
Epoch 84/100
20/20 - 19s - loss: 0.4758 - acc: 0.7685 - val_loss: 0.4685 - val_acc: 0.7690
Epoch 85/100
20/20 - 18s - loss: 0.4825 - acc: 0.7640 - val_loss: 0.4764 - val_acc: 0.7640
Epoch 86/100
20/20 - 19s - loss: 0.4683 - acc: 0.7725 - val_loss: 0.4613 - val_acc: 0.7630
Epoch 87/100
20/20 - 18s - loss: 0.4742 - acc: 0.7740 - val_loss: 0.4513 - val_acc: 0.7740
Epoch 88/100
20/20 - 19s - loss: 0.4721 - acc: 0.7740 - val_loss: 0.4711 - val_acc: 0.7640
Epoch 89/100
20/20 - 19s - loss: 0.4742 - acc: 0.7690 - val_loss: 0.4861 - val_acc: 0.7690
Epoch 90/100
20/20 - 19s - loss: 0.4804 - acc: 0.7735 - val_loss: 0.5442 - val_acc: 0.7190
Epoch 91/100
20/20 - 18s - loss: 0.4780 - acc: 0.7595 - val_loss: 0.4848 - val_acc: 0.7840
Epoch 92/100
20/20 - 19s - loss: 0.4657 - acc: 0.7735 - val_loss: 0.5229 - val_acc: 0.7290
Epoch 93/100
20/20 - 19s - loss: 0.4820 - acc: 0.7645 - val_loss: 0.4553 - val_acc: 0.7790
Epoch 94/100
20/20 - 19s - loss: 0.4517 - acc: 0.7845 - val_loss: 0.4569 - val_acc: 0.7760
Epoch 95/100
20/20 - 19s - loss: 0.4576 - acc: 0.7840 - val_loss: 0.5103 - val_acc: 0.7600
Epoch 96/100
20/20 - 18s - loss: 0.4742 - acc: 0.7725 - val_loss: 0.4482 - val_acc: 0.7800
Epoch 97/100
20/20 - 19s - loss: 0.4542 - acc: 0.7965 - val_loss: 0.4763 - val_acc: 0.7720
Epoch 98/100
20/20 - 19s - loss: 0.4649 - acc: 0.7765 - val_loss: 0.4728 - val_acc: 0.7680
Epoch 99/100
20/20 - 19s - loss: 0.4483 - acc: 0.7925 - val_loss: 0.5719 - val_acc: 0.7120
Epoch 100/100
20/20 - 19s - loss: 0.4476 - acc: 0.7805 - val_loss: 0.5189 - val_acc: 0.7380

import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'bo', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')

plt.figure()

plt.plot(epochs, loss, 'bo', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()
     



import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = '/content/' + fn
  img = image.load_img(path, target_size=(150, 150))
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(classes[0])
  if classes[0]>0.5:
    print(fn + " is a dog")
  else:
    print(fn + " is a cat")
     
Upload widget is only available when the cell has been executed in the current browser session. Please rerun this cell to enable.
Saving cat.2043.jpg to cat.2043.jpg
[0.]
cat.2043.jpg is a cat

from keras.models import save_model

model.save("/content/drive/My Drive/Cat and Dog Classification/output_model_.h5")
     
